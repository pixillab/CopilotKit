{"version":3,"sources":["../src/hooks/make-autosuggestions-function/use-make-standard-autosuggestions-function.tsx"],"sourcesContent":["import { COPILOT_CLOUD_PUBLIC_API_KEY_HEADER } from \"@copilotkit/shared\";\nimport { useCopilotContext } from \"@copilotkit/react-core\";\nimport { useCallback } from \"react\";\nimport { AutosuggestionsBareFunction } from \"../../types\";\nimport { retry } from \"../../lib/retry\";\nimport { InsertionEditorState } from \"../../types/base/autosuggestions-bare-function\";\nimport { SuggestionsApiConfig } from \"../../types/autosuggestions-config/suggestions-api-config\";\nimport {\n  CopilotRuntimeClient,\n  Message,\n  Role,\n  TextMessage,\n  convertGqlOutputToMessages,\n  convertMessagesToGqlInput,\n  filterAgentStateMessages,\n  CopilotRequestType,\n} from \"@copilotkit/runtime-client-gql\";\n\n/**\n * Returns a memoized function that sends a request to the specified API endpoint to get an autosuggestion for the user's input.\n * The function takes in the text before and after the cursor, and an abort signal.\n * It sends a POST request to the API endpoint with the messages array containing the system message, few shot messages, and user messages.\n * The function returns the suggestion from the API response.\n *\n * @param textareaPurpose - The purpose of the textarea. This is included in the system message.\n * @param apiEndpoint - The API endpoint to send the autosuggestion request to.\n * @param makeSystemMessage - A function that takes in a context string and returns a system message to include in the autosuggestion request.\n * @param fewShotMessages - An array of few shot messages to include in the autosuggestion request.\n * @param contextCategories - The categories of context strings we want to include. By default, we include the (default) \"global\" context category.\n * @returns A memoized function that sends a request to the specified API endpoint to get an autosuggestion for the user's input.\n */\nexport function useMakeStandardAutosuggestionFunction(\n  textareaPurpose: string,\n  contextCategories: string[],\n  apiConfig: SuggestionsApiConfig,\n): AutosuggestionsBareFunction {\n  const { getContextString, copilotApiConfig } = useCopilotContext();\n  const { chatApiEndpoint: url, publicApiKey, credentials, properties } = copilotApiConfig;\n  const headers = {\n    ...copilotApiConfig.headers,\n    ...(publicApiKey ? { [COPILOT_CLOUD_PUBLIC_API_KEY_HEADER]: publicApiKey } : {}),\n  };\n  const { maxTokens, stop } = apiConfig;\n\n  return useCallback(\n    async (editorState: InsertionEditorState, abortSignal: AbortSignal) => {\n      const res = await retry(async () => {\n        // @ts-expect-error -- Passing null is forbidden, but we're filtering it later\n        const messages: Message[] = [\n          new TextMessage({\n            role: Role.System,\n            content: apiConfig.makeSystemPrompt(\n              textareaPurpose,\n              getContextString([], contextCategories),\n            ),\n          }),\n          ...apiConfig.fewShotMessages,\n          editorState.textAfterCursor != \"\"\n            ? new TextMessage({\n                role: Role.User,\n                content: editorState.textAfterCursor,\n              })\n            : null,\n          new TextMessage({\n            role: Role.User,\n            content: `<TextAfterCursor>${editorState.textAfterCursor}</TextAfterCursor>`,\n          }),\n          new TextMessage({\n            role: Role.User,\n            content: `<TextBeforeCursor>${editorState.textBeforeCursor}</TextBeforeCursor>`,\n          }),\n        ].filter(Boolean);\n\n        const runtimeClient = new CopilotRuntimeClient({\n          url,\n          publicApiKey,\n          headers,\n          credentials,\n        });\n\n        const response = await runtimeClient\n          .generateCopilotResponse({\n            data: {\n              frontend: {\n                actions: [],\n                url: window.location.href,\n              },\n              messages: convertMessagesToGqlInput(filterAgentStateMessages(messages)),\n              metadata: {\n                requestType: CopilotRequestType.TextareaCompletion,\n              },\n              forwardedParameters: {\n                maxTokens,\n                stop,\n              },\n            },\n            properties,\n            signal: abortSignal,\n          })\n          .toPromise();\n\n        let result = \"\";\n        for (const message of convertGqlOutputToMessages(\n          response.data?.generateCopilotResponse?.messages ?? [],\n        )) {\n          if (abortSignal.aborted) {\n            break;\n          }\n          if (message.isTextMessage()) {\n            result += message.content;\n          }\n        }\n\n        return result;\n      });\n\n      return res;\n    },\n    [apiConfig, getContextString, contextCategories, textareaPurpose],\n  );\n}\n"],"mappings":";;;;;;;;;AAAA,SAAS,2CAA2C;AACpD,SAAS,yBAAyB;AAClC,SAAS,mBAAmB;AAK5B;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAeA,SAAS,sCACd,iBACA,mBACA,WAC6B;AAC7B,QAAM,EAAE,kBAAkB,iBAAiB,IAAI,kBAAkB;AACjE,QAAM,EAAE,iBAAiB,KAAK,cAAc,aAAa,WAAW,IAAI;AACxE,QAAM,UAAU,kCACX,iBAAiB,UAChB,eAAe,EAAE,CAAC,mCAAmC,GAAG,aAAa,IAAI,CAAC;AAEhF,QAAM,EAAE,WAAW,KAAK,IAAI;AAE5B,SAAO;AAAA,IACL,CAAO,aAAmC,gBAA6B;AACrE,YAAM,MAAM,MAAM,MAAM,MAAY;AA9C1C;AAgDQ,cAAM,WAAsB;AAAA,UAC1B,IAAI,YAAY;AAAA,YACd,MAAM,KAAK;AAAA,YACX,SAAS,UAAU;AAAA,cACjB;AAAA,cACA,iBAAiB,CAAC,GAAG,iBAAiB;AAAA,YACxC;AAAA,UACF,CAAC;AAAA,UACD,GAAG,UAAU;AAAA,UACb,YAAY,mBAAmB,KAC3B,IAAI,YAAY;AAAA,YACd,MAAM,KAAK;AAAA,YACX,SAAS,YAAY;AAAA,UACvB,CAAC,IACD;AAAA,UACJ,IAAI,YAAY;AAAA,YACd,MAAM,KAAK;AAAA,YACX,SAAS,oBAAoB,YAAY;AAAA,UAC3C,CAAC;AAAA,UACD,IAAI,YAAY;AAAA,YACd,MAAM,KAAK;AAAA,YACX,SAAS,qBAAqB,YAAY;AAAA,UAC5C,CAAC;AAAA,QACH,EAAE,OAAO,OAAO;AAEhB,cAAM,gBAAgB,IAAI,qBAAqB;AAAA,UAC7C;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AAED,cAAM,WAAW,MAAM,cACpB,wBAAwB;AAAA,UACvB,MAAM;AAAA,YACJ,UAAU;AAAA,cACR,SAAS,CAAC;AAAA,cACV,KAAK,OAAO,SAAS;AAAA,YACvB;AAAA,YACA,UAAU,0BAA0B,yBAAyB,QAAQ,CAAC;AAAA,YACtE,UAAU;AAAA,cACR,aAAa,mBAAmB;AAAA,YAClC;AAAA,YACA,qBAAqB;AAAA,cACnB;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,UACA;AAAA,UACA,QAAQ;AAAA,QACV,CAAC,EACA,UAAU;AAEb,YAAI,SAAS;AACb,mBAAW,WAAW;AAAA,WACpB,0BAAS,SAAT,mBAAe,4BAAf,mBAAwC,aAAxC,YAAoD,CAAC;AAAA,QACvD,GAAG;AACD,cAAI,YAAY,SAAS;AACvB;AAAA,UACF;AACA,cAAI,QAAQ,cAAc,GAAG;AAC3B,sBAAU,QAAQ;AAAA,UACpB;AAAA,QACF;AAEA,eAAO;AAAA,MACT,EAAC;AAED,aAAO;AAAA,IACT;AAAA,IACA,CAAC,WAAW,kBAAkB,mBAAmB,eAAe;AAAA,EAClE;AACF;","names":[]}
{"version":3,"sources":["../../../src/types/autosuggestions-config/autosuggestions-config.tsx","../../../src/types/base/base-autosuggestions-config.tsx","../../../src/types/autosuggestions-config/suggestions-api-config.tsx","../../../src/types/autosuggestions-config/insertions-api-config.tsx","../../../src/types/autosuggestions-config/editing-api-config.tsx"],"sourcesContent":["import { BaseAutosuggestionsConfig, defaultBaseAutosuggestionsConfig } from \"../base\";\nimport { SuggestionsApiConfig, defaultSuggestionsApiConfig } from \"./suggestions-api-config\";\nimport { InsertionsApiConfig, defaultInsertionsApiConfig } from \"./insertions-api-config\";\nimport { EditingApiConfig, defaultEditingApiConfig } from \"./editing-api-config\";\nimport { defaultCopilotContextCategories } from \"@copilotkit/react-core\";\n\n// Like the base autosuggestions config, with 2 additional fields:\n// 1. contextCategories: string[] | undefined;\n// 2. instead of apiConfigs, we have chatApiConfigs: a higher-level abstraction that uses a ChatGPT-like API endpoint.\nexport interface AutosuggestionsConfig extends Omit<BaseAutosuggestionsConfig, \"apiConfig\"> {\n  contextCategories: string[];\n  chatApiConfigs: {\n    suggestionsApiConfig: SuggestionsApiConfig;\n    insertionApiConfig: InsertionsApiConfig;\n    editingApiConfig: EditingApiConfig;\n  };\n}\n\nexport const defaultAutosuggestionsConfig: Omit<\n  AutosuggestionsConfig,\n  \"textareaPurpose\" | \"apiEndpoint\"\n> = {\n  ...defaultBaseAutosuggestionsConfig,\n  contextCategories: defaultCopilotContextCategories,\n  chatApiConfigs: {\n    suggestionsApiConfig: defaultSuggestionsApiConfig,\n    insertionApiConfig: defaultInsertionsApiConfig,\n    editingApiConfig: defaultEditingApiConfig,\n  },\n};\n","import { BaseCopilotTextareaApiConfig } from \"./autosuggestions-bare-function\";\nimport { defaultCopilotContextCategories } from \"@copilotkit/react-core\";\n\n/**\n * @interface BaseAutosuggestionsConfig\n *\n * @property {string} textareaPurpose - The purpose of the textarea. This is used to guide the autosuggestions.\n *\n * @property {string[]} contextCategories - The categories of context to consider when providing autosuggestions.\n *\n * @property {number} debounceTime - The amount of time (in milliseconds) to wait before triggering autosuggestions after the user has stopped typing.\n *\n * @property {BaseCopilotTextareaApiConfig} apiConfig - The configuration for the API that provides the autosuggestions.\n *\n * @property {boolean} disableWhenEmpty - Whether to disable autosuggestions when the textarea is empty.\n *\n * @property {boolean} disabled - Whether to disable autosuggestions entirely.\n *\n * @property {boolean} temporarilyDisableWhenMovingCursorWithoutChangingText - Whether to temporarily disable autosuggestions when the user moves the cursor without changing the text.\n *\n * @property {(event: React.KeyboardEvent<HTMLDivElement>) => boolean} shouldAcceptAutosuggestionOnKeyPress - A function that determines whether to accept the current autosuggestion based on a key press event. By default, the Tab key is used to accept the autosuggestion. Example code:\n *\n * ```typescript\n * const defaultShouldAcceptAutosuggestionOnKeyPress =  (event: React.KeyboardEvent<HTMLDivElement>) => {\n *   // if tab, accept the autosuggestion\n *   if (event.key === \"Tab\") {\n *     return true;\n *   }\n *   return false;\n * }\n * ```\n *\n * @property {(event: React.TouchEvent<HTMLDivElement>) => boolean} shouldAcceptAutosuggestionOnTouch - A function that determines whether to accept the current autosuggestion based on a mobile touch event. By default, the touching the end of a suggestion will accept it. Example code:\n *\n * ```typescript\n * const shouldAcceptAutosuggestionOnTouch =  (event: React.TouchEvent<HTMLDivElement>) => {\n *   // if tab, accept the autosuggestion\n *   if (event.type === \"touchstart\") {\n *     return true;\n *   }\n *   return false;\n * }\n * ```\n *\n * @property {(event: React.KeyboardEvent<HTMLDivElement>) => boolean} shouldToggleHoveringEditorOnKeyPress - A function that determines whether to toggle the hovering editor based on a key press event. By default, the Command + K key combination is used to toggle the hovering editor. Example code:\n *\n * ```typescript\n * const defaultShouldToggleHoveringEditorOnKeyPress =  (event: React.KeyboardEvent<HTMLDivElement>) => {\n *   // if command-k, toggle the hovering editor\n *   if (event.key === \"k\" && event.metaKey) {\n *     return true;\n *   }\n *   return false;\n * }\n * ```\n */\nexport interface BaseAutosuggestionsConfig {\n  textareaPurpose: string;\n  contextCategories: string[];\n  debounceTime: number;\n  apiConfig: BaseCopilotTextareaApiConfig;\n\n  disableWhenEmpty: boolean;\n  disabled: boolean;\n  temporarilyDisableWhenMovingCursorWithoutChangingText: boolean;\n  shouldAcceptAutosuggestionOnKeyPress: (event: React.KeyboardEvent<HTMLDivElement>) => boolean;\n  shouldAcceptAutosuggestionOnTouch: (event: React.TouchEvent<HTMLDivElement>) => boolean;\n  shouldToggleHoveringEditorOnKeyPress: (\n    event: React.KeyboardEvent<HTMLDivElement>,\n    shortcut: string,\n  ) => boolean;\n}\n\n// by default, command-k toggles the hovering editor\nconst defaultShouldToggleHoveringEditorOnKeyPress = (\n  event: React.KeyboardEvent<HTMLDivElement>,\n  shortcut: string,\n) => {\n  // if command-k, toggle the hovering editor\n  if (event.key === shortcut && event.metaKey) {\n    return true;\n  }\n  return false;\n};\n\nconst defaultShouldAcceptAutosuggestionOnKeyPress = (\n  event: React.KeyboardEvent<HTMLDivElement>,\n) => {\n  // if tab, accept the autosuggestion\n  if (event.key === \"Tab\") {\n    return true;\n  }\n  return false;\n};\n\nconst defaultShouldAcceptAutosuggestionOnTouch = () => false;\n\n/**\n * Default configuration for the BaseAutosuggestions.\n *\n * @property {number} debounceTime - The amount of time to wait before triggering the autosuggestions API call.\n * @property {string[]} contextCategories - The categories to use for context when making the autosuggestions API call.\n * @property {boolean} disableWhenEmpty - Whether to disable the autosuggestions when the textarea is empty.\n * @property {boolean} disabled - Whether to disable the autosuggestions feature entirely.\n * @property {boolean} temporarilyDisableWhenMovingCursorWithoutChangingText - Whether to temporarily disable the autosuggestions when the cursor is moved without changing the text.\n * @property {(event: React.KeyboardEvent<HTMLDivElement>) => boolean} shouldToggleHoveringEditorOnKeyPress - A function that determines whether to toggle the hovering editor based on a key press event.\n * @property {(event: React.KeyboardEvent<HTMLDivElement>) => boolean} shouldAcceptAutosuggestionOnKeyPress - A function that determines whether to accept the autosuggestion based on a key press event.\n * @property {() => boolean} defaultShouldAcceptAutosuggestionOnTouch - A function that determines whether to accept the autosuggestion based on a mobile touch event.\n */\n\nexport const defaultBaseAutosuggestionsConfig: Omit<\n  BaseAutosuggestionsConfig,\n  \"textareaPurpose\" | \"apiConfig\"\n> = {\n  debounceTime: 250,\n  contextCategories: defaultCopilotContextCategories,\n  disableWhenEmpty: true,\n  disabled: false,\n  temporarilyDisableWhenMovingCursorWithoutChangingText: true,\n  shouldToggleHoveringEditorOnKeyPress: defaultShouldToggleHoveringEditorOnKeyPress,\n  shouldAcceptAutosuggestionOnKeyPress: defaultShouldAcceptAutosuggestionOnKeyPress,\n  shouldAcceptAutosuggestionOnTouch: defaultShouldAcceptAutosuggestionOnTouch,\n};\n","import { Message, Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport { MakeSystemPrompt } from \"./subtypes/make-system-prompt\";\n\nexport interface SuggestionsApiConfig {\n  makeSystemPrompt: MakeSystemPrompt;\n  fewShotMessages: Message[];\n  maxTokens?: number;\n  stop?: string[];\n}\n\nexport const defaultSuggestionsMakeSystemPrompt: MakeSystemPrompt = (\n  textareaPurpose,\n  contextString,\n) => {\n  return `You are a versatile writing assistant.\n  \nThe user is writing some text.\nThe purpose is: \\\"${textareaPurpose}\\\"\n\nYour job is to guess what the user will write next AS BEST YOU CAN.\nOnly guess a SHORT distance ahead. Usually 1 sentence, or at most 1 paragraph.\n\nAdjust yourself to the user's style and implied intent.\n\nThe user will provide both the text before and after the cursor. You should use this to infer what the user is likely to write next.\n<TextAfterCursor>\n<TextBeforeCursor>\n<YourSuggestion>\n\nIf we need to add a whitespace character to the suggested text, make sure to explicitly add it in.\nRefrain from adding <YourSuggestion> tags when responding\n\nThe following external context is also provided. Use it to help you make better suggestions!!!\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n`;\n};\n\nexport const defaultSuggestionsFewShotMessages: Message[] = [\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>While I was there I also picked up some apples, oranges, and bananas.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content: \"This morning I woke up and went straight to the grocery store.\",\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      \" When I arrived I went straight to the produce section and picked out a big watermelon. \",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>and (iii) to the appointment of the Equityholders' Representative pursuant to Section 10.7 of the Merger Agreement and to the provisions thereof.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      '<TextBeforeCursor>The Optionholder, in the Optionholder\\'s capacity as a holder of vested Options, hereby irrevocably and unconditionally agrees: (i) that the Optionholder shall be deemed an \"Equityholder\" under the Merger Agreement and shall be entitled to the rights and benefits, and subject to the obligations, of an \"Equityholder\" thereunder;</TextBeforeCursor>',\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      ' (ii) that, for purposes of this Agreement and the Merger Agreement, the applicable percentage set forth opposite the name of the Optionholder in the Distribution Waterfall shall be such the Optionholder\\'s \"Pro Rata Share\"; ',\n  }),\n];\n\nexport const defaultSuggestionsApiConfig: SuggestionsApiConfig = {\n  makeSystemPrompt: defaultSuggestionsMakeSystemPrompt,\n  fewShotMessages: defaultSuggestionsFewShotMessages,\n};\n","import { Message, Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport { MakeSystemPrompt } from \"./subtypes/make-system-prompt\";\n\nexport interface InsertionsApiConfig {\n  makeSystemPrompt: MakeSystemPrompt;\n  fewShotMessages: Message[];\n  forwardedParams: { [key: string]: any } | undefined;\n}\n\nexport const defaultInsertionsMakeSystemPrompt: MakeSystemPrompt = (\n  textareaPurpose,\n  contextString,\n) => {\n  return `You are a versatile writing assistant helping the user insert new text into their existing work.\n  \nThe user is writing some text.\nThe purpose is: \\\"${textareaPurpose}\\\"\n\nThe following external context is also provided. Use it to inform your suggestions when relevant!!!\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThe user will provide you with a prompt for an INSERTION into the text they are writing. \nYour job is to come up with an INSERTION into the text that the user would like to use, AS BEST YOU CAN.\nOnly insert a SHORT segment. Usually 1 sentence, or at most 1 paragraph.\n\nAdjust yourself to the user's style and implied intent.\n\n\nThe user will provide the text before and after the cursor, as well as the INSERTION prompt. You should use this to infer the best relevant insertion.\nThe conversation will be structured as follows:\n<TextAfterCursor>\n<TextBeforeCursor>\n<InsertionPrompt>\n\n<YourInsertionSuggestion>\n`;\n};\n\nexport const defaultInsertionsFewShotMessages: Message[] = [\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>While I was there I also picked up some apples, oranges, and bananas.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextBeforeCursor>This morning I woke up and went straight to the grocery store.</TextBeforeCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content: \"<InsertionPrompt>I bought a big watermelon</InsertionPrompt>\",\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      \"When I arrived I went straight to the produce section and picked out a big watermelon.\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>and (iii) to the appointment of the Equityholders' Representative pursuant to Section 10.7 of the Merger Agreement and to the provisions thereof.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      '<TextBeforeCursor>The Optionholder, in the Optionholder\\'s capacity as a holder of vested Options, hereby irrevocably and unconditionally agrees: (i) that the Optionholder shall be deemed an \"Equityholder\" under the Merger Agreement and shall be entitled to the rights and benefits, and subject to the obligations, of an \"Equityholder\" thereunder;</TextBeforeCursor>',\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<InsertionPrompt>add section about the optionholder's pro rata share</InsertionPrompt>\",\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      ' (ii) that, for purposes of this Agreement and the Merger Agreement, the applicable percentage set forth opposite the name of the Optionholder in the Distribution Waterfall shall be such the Optionholder\\'s \"Pro Rata Share\"; ',\n  }),\n];\n\nexport const defaultInsertionsApiConfig: InsertionsApiConfig = {\n  makeSystemPrompt: defaultInsertionsMakeSystemPrompt,\n  fewShotMessages: defaultInsertionsFewShotMessages,\n  forwardedParams: undefined,\n};\n","import { Message, Role, TextMessage } from \"@copilotkit/runtime-client-gql\";\nimport { MakeSystemPrompt } from \"./subtypes/make-system-prompt\";\n\nexport interface EditingApiConfig {\n  makeSystemPrompt: MakeSystemPrompt;\n  fewShotMessages: Message[];\n  forwardedParams: { [key: string]: any } | undefined;\n}\n\nexport const defaultEditingMakeSystemPrompt: MakeSystemPrompt = (\n  textareaPurpose,\n  contextString,\n) => {\n  return `You are a versatile writing assistant helping the user edit a portion of their text.\n  \nThe user is writing some text.\nThe purpose is: \\\"${textareaPurpose}\\\"\n\nThe following external context is also provided. Use it when relevant.\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThe user has provided you with a PROMPT for EDITING a PORTION of the text. \nYour job is to come up with a new EDITED version OF THE SEGMENT IN QUESTION - AS BEST YOU CAN.\nOnly rewrite the portion of the text that the user has marked as \"TextToEdit\"!!!\n\nAdjust yourself to the user's style and implied intent.\n\nThe conversation will be structured as follows:\n<TextBeforeCursor>\n<TextToEdit>\n<TextAfterCursor>\n<EditingPrompt>\n\n<YourEditSuggestion>\n`;\n};\n\nexport const defaultEditingFewShotMessages: Message[] = [\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextBeforeCursor>This morning I woke up and went straight to the grocery store. </TextBeforeCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextToEdit>While I was there I picked up some apples, oranges, and bananas. </TextToEdit>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>The grocery store was having a sale on fruit, so I decided to stock up.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content: \"<EditingPrompt>I also bought a big watermelon</EditingPrompt>\",\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      \"While I was there I picked up some apples, oranges, and bananas, and a big watermelon.\",\n  }),\n\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextBeforeCursor>Yesterday, I spent the afternoon working on my new project.</TextBeforeCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content: \"<TextToEdit>It's quite challenging and requires a lot of focus.</TextToEdit>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<TextAfterCursor>I'm really excited about the potential outcomes of this project.</TextAfterCursor>\",\n  }),\n  new TextMessage({\n    role: Role.User,\n    content:\n      \"<EditingPrompt>emphasize the complexity and my enthusiasm for the project</EditingPrompt>\",\n  }),\n  new TextMessage({\n    role: Role.Assistant,\n    content:\n      \"It's a highly complex task that demands intense concentration, but I'm incredibly enthusiastic about the promising prospects of this project.\",\n  }),\n];\n\nexport const defaultEditingApiConfig: EditingApiConfig = {\n  makeSystemPrompt: defaultEditingMakeSystemPrompt,\n  fewShotMessages: defaultEditingFewShotMessages,\n  forwardedParams: undefined,\n};\n"],"mappings":"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","names":["import_runtime_client_gql","import_runtime_client_gql","import_react_core"]}